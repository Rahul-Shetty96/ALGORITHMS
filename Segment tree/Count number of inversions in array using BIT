http://www.geeksforgeeks.org/count-inversions-array-set-3-using-bit/
import java.util.*;
import java.io.*;


class BIT{
	

	int br[];
	public BIT(int ar[],int n)
	{
		br = new int[n+1];

		for(int i=0;i<n;i++)
			update(n,i,ar[i]);
	}

	void update(int n,int index,int val)
    {
    	index++;
    	while(index<=n)
    	{
	    	br[index] += val;
	    	index += index & (-index);
    	}
    }

    int get_sum(int index)
    {
    	int sum=0;
    	index++;
    	while(index>0)
    	{
    		sum += br[index];
    		index = index&(index-1);
    	}
    	return sum;
    }	
	
	public static void main(String a[])
	{
	     int n = i();
         int ar[] = new int[n];
         
         for(int i=0;i<n;i++)
         ar[i] = i();    
         
        
         //convert array to relative ordering from 1 to n.
         TreeMap<Integer,Integer> tm = new TreeMap();
        
         for(int i=0;i<n;i++)
         tm.put(ar[i],i);
        
         int k=1;
        
         for(int i : tm.keySet())
         {
             int ind = tm.get(i);
             ar[ind] = k++;
         }
         
        
         //main logic of inversion
         long sum=0;
         BIT b = new BIT(new int[n],n);
         for(int i=n-1;i>=0;i--)
         {
            sum += b.get_sum(ar[i]-1);
            b.update(n,ar[i],1);
         }
         System.out.print(sum);
	}
}
