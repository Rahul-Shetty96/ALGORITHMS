import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class segment_tree {
    
    int seg[],seg_size;
    segment_tree(int a[],int n)
    {
        int h = (int)Math.ceil(Math.log(n)/Math.log(2));
        seg_size = (int)Math.pow(2,h+1)-1;
        
        seg = new int[seg_size];
        const_tree(a,0,n-1,0);
    }

    int const_tree(int []a,int ss,int se,int si)
    {
        if(ss == se)
        {
            seg[si] = a[ss];
            return seg[si];
        }
        
        int mid = getMid(ss,se);
        seg[si] = const_tree(a,ss,mid,2*si+1) + const_tree(a,mid+1,se,2*si+2);
        return seg[si];
    }
    
    int getMid(int s, int e) {
        return s + (e - s) / 2;
    }
    
    int get_sum(int ns,int ne,int qs,int qe,int si)
    {
        //total overlap..if node range is inside query range..
        if(qs<=ns && ne<=qe)
            return seg[si];
        
        
        //no overlap..if node range and query range dont overlap
        if(qs>ne || ns>qe)
            return 0;
        
        //partial overlap..
        int mid = getMid(ns,ne);
        
        return get_sum(ns, mid, qs, qe, 2 * si + 1) +
                get_sum(mid + 1, ne, qs, qe, 2 * si + 2);
    } 
    
    void update(int ns, int ne, int i, int diff, int si)
    {
        //not to move further
        if(i<ns || i>ne)
        return;
        
        
        //reached leaf
        if(ns == ne && ns == i)
        {
            seg[si] += diff;
            return;
        }
        
        
            
        //update and move further..move further  coz overlap
        seg[si] += diff;
        int mid = getMid(ns,ne);
        update(ns,mid,i,diff,2*si+1);
        update(mid+1,ne,i,diff,2*si+2);
    }
    
    
    public static void main(String[] args) 
    {
        int a[] = {1,3,5,7,9,11};
        segment_tree s = new segment_tree(a,6);
        for(int i=0;i<s.seg.length;i++)
            System.out.print(s.seg[i]+" ");
        
    }
}
