class Edge extends Set implements Comparable<Edge>{
        
        Node n1,n2;
        int weight;
        public Edge(Node a,Node b,int weight)
        {
            this.n1 = a;
            this.n2 = b;
            this.weight = weight;
        }
        
        public int compareTo(Edge e)
        {
            if(this.weight<e.weight)
                return -1;
            else if(this.weight > e.weight)
                return 1;
            else 
                return 0;
       }
    }  


public class Set {

    static Scanner sc = new Scanner(System.in);
    
    static int i(){
        return sc.nextInt();
    }
    
    HashMap<Integer,Node> hm = new HashMap();
        
        class Node
        {
            int data;
            int rank;
            Node parent;
        }
        
        public void makeSet(int d)
        {
            Node n = new Node();
            n.data = d;
            n.parent = n;
            n.rank = 0;
            hm.put(d,n);
        }
    
        public Node findSet(int d){
            return findSet(hm.get(d));
        }
    
        public Node findSet(Node node)
        {
            Node par = node.parent;
            if( par == node )
                return par;
            else{
                node.parent = findSet(par);     //Yaha hota hai path compression
                return node.parent;
                
            }
        }
    
        public boolean union(int d1,int d2)
        {
            Node n1 = hm.get(d1);
            Node n2 = hm.get(d2);
            Node p1 = findSet(n1);
            Node p2 = findSet(n2);
            
            if(p1.data == p2.data)
                return false;
            else
            {
                if(p1.rank>p2.rank)
                {
                    p2.parent = p1;
                }
                else if(p2.rank>p1.rank)
                {
                    p1.parent = p2;
                }
                else
                {
                    p2.parent = p1;
                    p1.rank++;
                }
                return true;
            }    
        }
   
    
    public static void main(String[] args) {
       
        int n = i();
        int m = i();
        Set s = new Set();
        for(int i=1;i<=n;i++)
        s.makeSet(i);            //Creating Node Objects
        
        Edge e[] = new Edge[m];
        for(int i=0;i<m;i++)
        {
            e[i] =new Edge(s.hm.get(i()),s.hm.get(i()),i());         //Creating Edges   
        }
        
        Arrays.sort(e);
        
        int sum = 0;
        for(int i=0;i<m;i++)
        {
            if(s.union(e[i].n1.data,e[i].n2.data))
            {
                sum+=e[i].weight;
            }
            
        }
        System.out.print(sum);
    }
}
